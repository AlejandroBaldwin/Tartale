{"version":3,"sources":["img/logo.jpeg","img/alfajor.jpeg","img/brownies.jpeg","img/crema_volteada.jpeg","img/mango_pie.jpeg","img/mini_cake.jpeg","img/mini_pie.jpeg","components/NavigationPanel/NavigationPanel.js","components/Scroll/Scroll.js","components/Item/Item.js","components/ItemList/ItemList.js","img/img.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationPanel","className","alt","src","logo","Scroll","props","children","Item","source","key","ItemList","images","imgs","map","img","i","id","breakpointCols","default","1100","700","500","columnClassName","alfajor","brownies","crema_volteada","pie_de_mango","mini_cake","mini_pie","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,mC,iBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,uPCyB5BC,EArBS,WACpB,OAEI,yBAAKC,UAAU,uBAGX,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,OAAOC,IAAI,GAAGC,IAAKC,MAClC,wBAAIH,UAAU,SAAd,YAIJ,yBAAKA,UAAU,+BCLZI,G,MARA,SAACC,GACZ,OACI,yBAAKL,UAAU,UACVK,EAAMC,Y,gBCCJC,G,MAJF,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQP,EAAe,EAAfA,IAAKQ,EAAU,EAAVA,IACzB,OAAQ,yBAAKA,IAAKA,EAAKT,UAAU,WAAWE,IAAKM,EAAQP,IAAKA,MCwBnDS,G,MArBE,SAAC,GAAc,IAQtBC,EARqB,EAAXC,KAQIC,KAAI,SAACC,EAAKC,GAC1B,OACM,kBAAC,EAAD,CAAMd,IAAKa,EAAIb,IAAKO,OAAQM,EAAIZ,IAAKO,IAAKK,EAAIE,QAIxD,OACI,kBAAC,IAAD,CAASC,eAdgB,CACzBC,QAAS,EACTC,KAAM,EACNC,IAAK,EACLC,IAAK,GAU0CrB,UAAU,kBAAkBsB,gBAAgB,0BACxFX,K,iGCkBIG,EAjCH,CACR,CACIE,GAAI,UACJd,IAAKqB,IACLtB,IAAK,qBAET,CACIe,GAAI,WACJd,IAAKsB,IACLvB,IAAK,sBAET,CACIe,GAAI,iBACJd,IAAKuB,IACLxB,IAAK,4BAET,CACIe,GAAI,eACJd,IAAKwB,IACLzB,IAAK,0BAET,CACIe,GAAI,YACJd,IAAKyB,IACL1B,IAAK,uBAET,CACIe,GAAI,WACJd,IAAK0B,IACL3B,IAAK,uB,MChBE4B,MAZf,WAEE,OACE,yBAAK7B,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUY,KAAMA,OCHJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f375b94d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.626357ab.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/alfajor.c5adbdb8.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/brownies.1e81b16d.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/crema_volteada.d7d15449.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/mango_pie.ed9031bd.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/mini_cake.a4949e98.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/mini_pie.a5ceab0d.jpeg\";","import React from 'react';\r\nimport './NavigationPanel.css'\r\nimport logo from '../../img/logo.jpeg'\r\n\r\nconst NavigationPanel = () => {\r\n    return(\r\n        /* Navigation Panel Container */\r\n        <div className='navigationContainer'>\r\n\r\n            {/* Header Section */}\r\n            <div className='navigationContainerHeader'>\r\n                <img className='logo' alt='' src={logo}/>\r\n                <h1 className='title'>Tartale</h1>\r\n            </div>\r\n\r\n            {/* Navigation Links */}\r\n            <div className='navigationContainerLinks'>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavigationPanel;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div className='scroll' >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React from 'react';\r\nimport './Item.css'\r\n\r\nconst Item = ({ source, alt, key }) => {\r\n    return (<img key={key} className='img-card' src={source} alt={alt} />)\r\n}\r\n\r\nexport default Item","import React from 'react';\r\nimport Masonry from 'react-masonry-css';\r\nimport Item from '../Item/Item';\r\nimport './ItemList.css';\r\n\r\n\r\n\r\nconst ItemList = ({ imgs }) => {\r\n    const breakpointColumnsObj = {\r\n        default: 3,\r\n        1100: 2,\r\n        700: 2,\r\n        500: 1\r\n    };\r\n    \r\n    const images = imgs.map((img, i) => {\r\n        return (\r\n              <Item alt={img.alt} source={img.src} key={img.id}/>\r\n        );\r\n    })\r\n\r\n    return(\r\n        <Masonry breakpointCols={breakpointColumnsObj} className=\"my-masonry-grid\" columnClassName=\"my-masonry-grid_column\">\r\n          {images}\r\n        </Masonry>\r\n    )\r\n}\r\n\r\nexport default ItemList","import React from 'react';\r\nimport alfajor from './alfajor.jpeg';\r\nimport brownies from './brownies.jpeg';\r\nimport crema_volteada from './crema_volteada.jpeg';\r\nimport pie_de_mango from './mango_pie.jpeg';\r\nimport mini_cake from './mini_cake.jpeg';\r\nimport mini_pie from './mini_pie.jpeg';\r\n\r\nconst img = [\r\n    {\r\n        id: 'alfajor',\r\n        src: alfajor,\r\n        alt: 'Imagen de alfajor'\r\n    },\r\n    {\r\n        id: 'brownies',\r\n        src: brownies,\r\n        alt: 'Imagen de brownies'\r\n    },\r\n    {\r\n        id: 'crema_volteada',\r\n        src: crema_volteada,\r\n        alt: 'Imagen de crema volteada'\r\n    },\r\n    {\r\n        id: 'pie_de_mango',\r\n        src: pie_de_mango,\r\n        alt: 'Imagen de pie de mango'\r\n    },\r\n    {\r\n        id: 'mini_cake',\r\n        src: mini_cake,\r\n        alt: 'Imagen de mini cake'\r\n    },\r\n    {\r\n        id: 'mini_pie',\r\n        src: mini_pie,\r\n        alt: 'Imagen de mini pie'\r\n    }\r\n];\r\n\r\nexport default img","import React from 'react';\nimport NavigationPanel from '../components/NavigationPanel/NavigationPanel';\nimport Scroll from '../components/Scroll/Scroll';\nimport ItemList from '../components/ItemList/ItemList';\nimport imgs from '../img/img';\nimport './App.css';\n\n\n\nfunction App() {\n\n  return (\n    <div className='container'>\n      <NavigationPanel />\n      <Scroll >\n        <ItemList imgs={imgs}/>\n      </Scroll>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}